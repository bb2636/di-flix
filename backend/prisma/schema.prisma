generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id    Int     @id @default(autoincrement())
  email      String  @unique 
  password   String?
  is_member  Boolean @default(false)
  is_deleted Boolean @default(false)

  watchHistories WatchHistory[]
  wishlists      Wishlist[]
}

model Genre {
genre_ids    Int      @id
genre_name   String

contentGenres ContentGenre[]   
}

model Content {
movie_id     Int      @id @default(autoincrement())
title        String   @db.VarChar(255)
description  String?  @db.Text
views        Int      @default(0)
poster_path String? @db.VarChar(255)
contentGenres ContentGenre[]  

watchHistories WatchHistory[]
wishlists      Wishlist[]
}

model ContentGenre {
  CG_id      Int    @id @default(autoincrement())  
  movie_id   Int                                    
  genre_ids  Int                                    

  content    Content @relation(fields: [movie_id], references: [movie_id])  
  genre      Genre   @relation(fields: [genre_ids], references: [genre_ids])    

  @@unique([movie_id, genre_ids])  
}


model WatchHistory {
  history_id Int      @id @default(autoincrement())
  user_id    Int?
  movie_id   Int?

  user   User?    @relation(fields: [user_id], references: [user_id])
  movie  Content? @relation(fields: [movie_id], references: [movie_id])

  timestamp DateTime @default(now())
  watchTime Int @default(0)

  @@unique([user_id, movie_id], map: "user_id_movie_id_unique")
}

model Wishlist {
  wishlist_id Int     @id @default(autoincrement())
  user_id     Int?
  movie_id    Int?

  user   User?    @relation(fields: [user_id], references: [user_id])
  movie  Content? @relation(fields: [movie_id], references: [movie_id])
}
